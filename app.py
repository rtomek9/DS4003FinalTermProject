{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMwmUt6BM7UbZp3w75nxY8a",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rtomek9/DS4003FinalTermProject/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install dash"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S_NJurnv6dva",
        "outputId": "42420a20-0097-43a3-bc9a-ea91dd7240f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting dash\n",
            "  Downloading dash-2.16.1-py3-none-any.whl (10.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.2/10.2 MB\u001b[0m \u001b[31m15.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: Flask<3.1,>=1.0.4 in /usr/local/lib/python3.10/dist-packages (from dash) (2.2.5)\n",
            "Requirement already satisfied: Werkzeug<3.1 in /usr/local/lib/python3.10/dist-packages (from dash) (3.0.2)\n",
            "Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash) (5.15.0)\n",
            "Collecting dash-html-components==2.0.0 (from dash)\n",
            "  Downloading dash_html_components-2.0.0-py3-none-any.whl (4.1 kB)\n",
            "Collecting dash-core-components==2.0.0 (from dash)\n",
            "  Downloading dash_core_components-2.0.0-py3-none-any.whl (3.8 kB)\n",
            "Collecting dash-table==5.0.0 (from dash)\n",
            "  Downloading dash_table-5.0.0-py3-none-any.whl (3.9 kB)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.10/dist-packages (from dash) (7.1.0)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from dash) (4.11.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from dash) (2.31.0)\n",
            "Collecting retrying (from dash)\n",
            "  Downloading retrying-1.3.4-py3-none-any.whl (11 kB)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (from dash) (1.6.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from dash) (67.7.2)\n",
            "Requirement already satisfied: Jinja2>=3.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (3.1.3)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (2.2.0)\n",
            "Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash) (8.1.7)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->dash) (8.2.3)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->dash) (24.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from Werkzeug<3.1->dash) (2.1.5)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata->dash) (3.18.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->dash) (2024.2.2)\n",
            "Requirement already satisfied: six>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from retrying->dash) (1.16.0)\n",
            "Installing collected packages: dash-table, dash-html-components, dash-core-components, retrying, dash\n",
            "Successfully installed dash-2.16.1 dash-core-components-2.0.0 dash-html-components-2.0.0 dash-table-5.0.0 retrying-1.3.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "bld6QnyF6Vku",
        "outputId": "467c3f5f-25b4-402c-91d7-777e0c31efac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dash app running on:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "(async (port, path, text, element) => {\n",
              "    if (!google.colab.kernel.accessAllowed) {\n",
              "      return;\n",
              "    }\n",
              "    element.appendChild(document.createTextNode(''));\n",
              "    const url = await google.colab.kernel.proxyPort(port);\n",
              "    const anchor = document.createElement('a');\n",
              "    anchor.href = new URL(path, url).toString();\n",
              "    anchor.target = '_blank';\n",
              "    anchor.setAttribute('data-href', url + path);\n",
              "    anchor.textContent = text;\n",
              "    element.appendChild(anchor);\n",
              "  })(8050, \"/\", \"http://127.0.0.1:8050/\", window.element)"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "# real file\n",
        "#new fav\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.express as px\n",
        "from dash import Dash, dcc, html, Input, Output, callback\n",
        "from datetime import date\n",
        "import plotly.graph_objects as go\n",
        "import plotly.io as pio\n",
        "import base64\n",
        "\n",
        "\n",
        "#color theme\n",
        "pio.templates[\"custom_theme\"] = go.layout.Template(\n",
        "    layout=go.Layout(\n",
        "        colorway=['#ff0000', '#00ff00', '#0000ff']\n",
        "    )\n",
        ")\n",
        "pio.templates.default = 'custom_theme'\n",
        "# Read data\n",
        "gapminder_df = px.data.gapminder().query(\"year==2003\")\n",
        "df = pd.read_csv('/content/mydata2.csv')\n",
        "rad_columns = [\"stability\",\t\"rights\",\t\"health\",\t\"safety\",\t\"climate\",\t\"cost\",\t\"popularity\"]\n",
        "range = [0,10,20,30,40,50,60,70,80,90,100]\n",
        "\n",
        "# Initialize app\n",
        "external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']\n",
        "app = Dash(__name__, external_stylesheets=external_stylesheets)\n",
        "server = app.server\n",
        "image_filename = 'ohgraphic.png'\n",
        "subset_df = df[[\"country\",\"stability\",\t\"rights\",\t\"health\",\t\"safety\",\t\"climate\",\t\"cost\",\t\"popularity\"]]\n",
        "dropdown_columns = [col for col in df.columns if col not in ['iso_alpha', 'popularity','country']]\n",
        "\n",
        "# Define layout\n",
        "app.layout = html.Div([\n",
        "\n",
        "    html.H2(\"Oh, the Places You'll Go!\", style={'text-align': 'center'}),\n",
        "    html.P(\"The following dashboard offers an overview of key factors impacting quality of life in 137 different countries across the world. It assesses economic and political stability, legal systems, health services, safety, climate, costs, and popularity. Current data stems from reputable sources such as the World Bank, Transparency.org, the United Nations, and more. Every metric is normalized on a scale from 0-100 based on their source.\"),\n",
        "    html.Div([\n",
        "        html.H4(\"Select two countries\", style={'text-align': 'center'}),\n",
        "        dcc.Dropdown(\n",
        "            id='country-dropdown',\n",
        "            options=[{'label': country, 'value': country} for country in subset_df['country']], # fix to remove last 2 columns\n",
        "            value=df['country'][12:14],  # Pre-select the first two countries\n",
        "            multi=True  # Set multi attribute to True\n",
        "        ),\n",
        "        dcc.Graph(id='polar-plot', figure={}),\n",
        "    ], style={'display': 'inline-block', 'width': '50%'}),\n",
        "\n",
        "    html.Div([\n",
        "        html.H4(\"Select two metrics\", style={'text-align': 'center'}),\n",
        "        dcc.Dropdown(\n",
        "            id='metric-dropdown',\n",
        "            options=[{'label': col, 'value': col} for col in dropdown_columns],\n",
        "            value=[\"climate\", \"health\"],\n",
        "            multi=True\n",
        "        ),\n",
        "        dcc.Graph(id='bar-chart', figure={}),\n",
        "    ], style={'display': 'inline-block', 'width': '50%', 'vertical-align': 'top', 'float': 'right'}),\n",
        "\n",
        "    html.Div([\n",
        "        html.Div([\n",
        "            html.Div(id='country-info', style={'text-align': 'center'}),\n",
        "            html.H4(\"Hover over the bubbles to compare all metrics\", style={'text-align': 'center'}),\n",
        "            html.Div(id='bubble-chart-container', style={'display': 'flex', 'justify-content': 'center'}),\n",
        "            html.H4(\"Population by Country\", style={'text-align': 'center'}),\n",
        "            dcc.Graph(id='geo-map', figure={}, style={'align-self': 'center'}),\n",
        "        ], style={'max-width': '900px', 'margin': '0 auto'})\n",
        "    ]),\n",
        "   html.P(\"So...be your name Buxbaum or Bixby or Bray\"),\n",
        "   html.P (\"or Mordecai Ali Van Allen O'Shea,\"),\n",
        "   html.P(\"You're off the Great Places!\"),\n",
        "    html.P(\"Today is your day!\"),\n",
        "html.P(\"Your mountain is waiting\"),\n",
        "html.P(\"So...get on your way!\"),\n",
        "html.P(\"-Dr. Suess\", style={'text-align': 'right'})\n",
        "])\n",
        "\n",
        "# Callbacks\n",
        "@app.callback(\n",
        "    [Output('polar-plot', 'figure'),\n",
        "     Output('bar-chart', 'figure')],\n",
        "    [Input('country-dropdown', 'value'),\n",
        "     Input('metric-dropdown', 'value')]\n",
        ")\n",
        "def update_plot(selected_countries, selected_metrics):\n",
        "    # Polar plot\n",
        "    traces = []\n",
        "    for country in selected_countries:\n",
        "        country_data = df[df['country'] == country]\n",
        "        values = country_data[rad_columns].values.flatten().tolist()\n",
        "        traces.append(go.Scatterpolar(\n",
        "            r=values,\n",
        "            theta=rad_columns,\n",
        "            fill='toself',\n",
        "            name=country\n",
        "        ))\n",
        "    layout = go.Layout(\n",
        "        polar=dict(\n",
        "            radialaxis=dict(\n",
        "                visible=True,\n",
        "                range=[0, 100]  # Adjust range as needed\n",
        "            )\n",
        "        ),\n",
        "        showlegend=True\n",
        "    )\n",
        "    polar_fig = go.Figure(data=traces, layout=layout)\n",
        "\n",
        "    # Bar chart\n",
        "    bar_traces = []\n",
        "    for metric in selected_metrics:\n",
        "        bar_traces.append(go.Bar(\n",
        "            x=selected_countries,\n",
        "            y=df[df['country'].isin(selected_countries)][metric],\n",
        "            name=metric\n",
        "        ))\n",
        "    bar_layout = go.Layout(\n",
        "        barmode='group',\n",
        "        xaxis=dict(title='Country'),\n",
        "        yaxis=dict(title='Value')\n",
        "    )\n",
        "    bar_fig = go.Figure(data=bar_traces, layout=bar_layout)\n",
        "\n",
        "    return polar_fig, bar_fig\n",
        "\n",
        "@app.callback(\n",
        "    Output('country-info', 'children'),\n",
        "    [Input('country-dropdown', 'value')] #maybe error\n",
        ")\n",
        "def update_country_info(selected_countries):\n",
        "    info = html.Div(children=[\n",
        "        html.Div([\n",
        "            html.H3(country, style={'color': '#FF0000', 'float': 'left', 'width': '100%'}),  # Change color to red\n",
        "            html.P(f\"Strength: {df[df['country'] == country][rad_columns].max().idxmax()}\"),\n",
        "            html.P(f\"Weakness: {df[df['country'] == country][rad_columns].min().idxmin()}\")\n",
        "        ], style={'margin-bottom': '20px', 'width': '50%', 'float': 'left'})\n",
        "        if i % 2 == 0 else\n",
        "        html.Div([\n",
        "            html.H3(country, style={'color': '#00FF00', 'float': 'right', 'width': '100%'}),  # Change color to green\n",
        "            html.P(f\"Strength: {df[df['country'] == country][rad_columns].max().idxmax()}\"),\n",
        "            html.P(f\"Weakness: {df[df['country'] == country][rad_columns].min().idxmin()}\")\n",
        "        ], style={'margin-bottom': '20px', 'width': '50%', 'float': 'right'})\n",
        "        for i, country in enumerate(selected_countries)\n",
        "    ], style={'width': '100%', 'overflow': 'auto'})  # Ensure container width and enable overflow\n",
        "\n",
        "    return info\n",
        "left_color = '#FF0000'  # Red\n",
        "right_color = '#00FF00'  # Green\n",
        "\n",
        "@app.callback(\n",
        "    Output('bubble-chart-container', 'children'),\n",
        "    [Input('country-dropdown', 'value')]\n",
        ")\n",
        "def update_bubble_charts(selected_countries):\n",
        "    bubble_charts = []\n",
        "    for country in selected_countries:\n",
        "        # Get country info\n",
        "        country_data = df[df['country'] == country]\n",
        "        metrics = country_data.columns.drop(['country','population (thousands)','iso_alpha'])\n",
        "\n",
        "        bubble_fig = go.Figure()\n",
        "\n",
        "        # Iterate over metrics\n",
        "        for i, metric in enumerate(metrics):\n",
        "            metric_value = country_data[metric].values[0]\n",
        "            normalized_value = (metric_value - df[metric].min()) / (df[metric].max() - df[metric].min()) * 100\n",
        "\n",
        "            # Assign different color to each bubble\n",
        "            color = left_color if i % 2 == 0 else right_color\n",
        "\n",
        "            bubble_fig.add_trace(go.Scatter(\n",
        "                x=[country],\n",
        "                y=[normalized_value],\n",
        "                mode='markers',\n",
        "                marker=dict(\n",
        "                    size=metric_value,\n",
        "                    color=color,\n",
        "                    opacity=0.5\n",
        "                ),\n",
        "                name=metric\n",
        "            ))\n",
        "\n",
        "        bubble_fig.update_layout(\n",
        "            title=f'{country} Metrics',\n",
        "            xaxis=dict(title='Country'),\n",
        "            yaxis=dict(title='Value (normalized)', range=[0, 100]),  # Set y-axis range from 0 to 100\n",
        "            showlegend=False  # Remove legend\n",
        "        )\n",
        "        bubble_charts.append(dcc.Graph(figure=bubble_fig))\n",
        "\n",
        "    # Ensure that both bubble charts are returned\n",
        "\n",
        "    return bubble_charts\n",
        "left_color = '#FF0000'  # Red\n",
        "right_color = '#00FF00'  # Green\n",
        "\n",
        "@app.callback(\n",
        "    Output('geo-map', 'figure'),\n",
        "    [Input('country-dropdown', 'value')]\n",
        ")\n",
        "def update_map(selected_countries):\n",
        "    if not selected_countries:  # If no country is selected\n",
        "        return {}\n",
        "\n",
        "    # Filter the data for selected countries\n",
        "    filtered_data = df[df['country'].isin(selected_countries)]\n",
        "\n",
        "    # Create a bubble map using Plotly Express\n",
        "    fig = px.scatter_geo(filtered_data,\n",
        "                         locations=\"iso_alpha\",\n",
        "                         size=\"population (thousands)\",\n",
        "                         hover_name=\"country\",\n",
        "                         projection=\"natural earth\")\n",
        "    if len(selected_countries) >= 1:\n",
        "        fig.update_traces(marker=dict(color=['#FF0000']))  # Color the first country red\n",
        "    if len(selected_countries) >= 2:\n",
        "        fig.update_traces(marker=dict(color=['#00FF00']), selector=dict(name=selected_countries[1]))  # Color the second country green\n",
        "    fig.update_layout(\n",
        "        width=900,  # Adjust width\n",
        "        height=600,  # Adjust height\n",
        "    )\n",
        "    return fig\n",
        "\n",
        "# Run app\n",
        "if __name__ == '__main__':\n",
        "    app.run(jupyter_mode='external', debug=True)"
      ]
    }
  ]
}